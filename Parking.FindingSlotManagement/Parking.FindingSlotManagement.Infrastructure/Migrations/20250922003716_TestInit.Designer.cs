// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Parking.FindingSlotManagement.Infrastructure.Persistences;

#nullable disable

namespace Parking.FindingSlotManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ParkZDbContext))]
    [Migration("20250922003716_TestInit")]
    partial class TestInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ApproveParking", b =>
                {
                    b.Property<int>("ApproveParkingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApproveParkingId"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteForAdmin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParkingId")
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApproveParkingId");

                    b.HasIndex("ParkingId");

                    b.HasIndex("StaffId");

                    b.ToTable("ApproveParkings");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Bill", b =>
                {
                    b.Property<int>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillId"), 1L, 1);

                    b.Property<int?>("BusinessId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("BillId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("WalletId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"), 1L, 1);

                    b.Property<DateTime?>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateBook")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("GuestName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GuestPhone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<bool?>("IsRating")
                        .HasColumnType("bit");

                    b.Property<string>("QRImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("money");

                    b.Property<decimal>("UnPaidMoney")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int?>("VehicleInforId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleInforID");

                    b.HasKey("BookingId");

                    b.HasIndex(new[] { "UserId" }, "IX_Booking_UserID");

                    b.HasIndex(new[] { "VehicleInforId" }, "IX_Booking_VehicleInforID");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.BookingDetails", b =>
                {
                    b.Property<int>("BookingDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingDetailsId"), 1L, 1);

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeSlotId")
                        .HasColumnType("int");

                    b.HasKey("BookingDetailsId");

                    b.HasIndex("BookingId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("BookingDetails");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.BusinessProfile", b =>
                {
                    b.Property<int>("BusinessProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessProfileId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BackIdentification")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BusinessLicense")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("FeeId")
                        .HasColumnType("int");

                    b.Property<string>("FrontIdentification")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("BusinessProfileId");

                    b.HasIndex("FeeId");

                    b.HasIndex(new[] { "UserId" }, "UQ__Business__1788CCAD877AB68C")
                        .IsUnique()
                        .HasFilter("([UserID] IS NOT NULL)");

                    b.ToTable("Business", (string)null);

                    b.HasData(
                        new
                        {
                            BusinessProfileId = 1,
                            Address = "123 Đường ABC, Quận 1, TP. Hồ Chí Minh",
                            BackIdentification = "https://via.placeholder.com/300x200",
                            BusinessLicense = "https://via.placeholder.com/300x200",
                            FeeId = 2,
                            FrontIdentification = "https://via.placeholder.com/300x200",
                            Name = "Công ty TNHH Bãi đỗ xe ABC",
                            Type = "Doanh nghiệp",
                            UserId = 2
                        },
                        new
                        {
                            BusinessProfileId = 2,
                            Address = "456 Đường XYZ, Quận 2, TP. Hồ Chí Minh",
                            BackIdentification = "https://via.placeholder.com/300x200",
                            BusinessLicense = "https://via.placeholder.com/300x200",
                            FeeId = 1,
                            FrontIdentification = "https://via.placeholder.com/300x200",
                            Name = "Bãi đỗ xe XYZ",
                            Type = "Cá nhân",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ConflictRequest", b =>
                {
                    b.Property<int>("ConflictRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConflictRequestId"), 1L, 1);

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParkingId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConflictRequestId");

                    b.ToTable("ConflictRequests");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.FavoriteAddress", b =>
                {
                    b.Property<int>("FavoriteAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteAddressId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TagName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("FavoriteAddressId");

                    b.HasIndex(new[] { "UserId" }, "IX_FavoriteAddress_UserID");

                    b.ToTable("FavoriteAddress", (string)null);
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Fee", b =>
                {
                    b.Property<int>("FeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeeId"), 1L, 1);

                    b.Property<string>("BusinessType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfParking")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FeeId");

                    b.ToTable("Fees");

                    b.HasData(
                        new
                        {
                            FeeId = 1,
                            BusinessType = "Tư nhân",
                            Name = "Cước phí mặc định tư nhân",
                            NumberOfParking = "1",
                            Price = 100000m
                        },
                        new
                        {
                            FeeId = 2,
                            BusinessType = "Doanh nghiệp",
                            Name = "Cước phí mặc định doanh nghiệp",
                            NumberOfParking = "Unlimited",
                            Price = 500000m
                        },
                        new
                        {
                            FeeId = 3,
                            BusinessType = "Doanh nghiệp lớn",
                            Name = "Phí đăng ký doanh nghiệp lớn",
                            NumberOfParking = "21-50",
                            Price = 200000m
                        },
                        new
                        {
                            FeeId = 4,
                            BusinessType = "Tập đoàn",
                            Name = "Phí đăng ký tập đoàn",
                            NumberOfParking = "50+",
                            Price = 500000m
                        });
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.FieldWorkParkingImg", b =>
                {
                    b.Property<int>("FieldWorkParkingImgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FieldWorkParkingImgId"), 1L, 1);

                    b.Property<int?>("ApproveParkingId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FieldWorkParkingImgId");

                    b.HasIndex("ApproveParkingId");

                    b.ToTable("FieldWorkParkingImgs");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Floor", b =>
                {
                    b.Property<int>("FloorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FloorId"), 1L, 1);

                    b.Property<string>("FloorName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ParkingId")
                        .HasColumnType("int")
                        .HasColumnName("ParkingID");

                    b.HasKey("FloorId");

                    b.HasIndex(new[] { "ParkingId" }, "IX_Floors_ParkingID");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            FloorId = 1,
                            FloorName = "Tầng B1",
                            IsActive = true,
                            ParkingId = 1
                        },
                        new
                        {
                            FloorId = 2,
                            FloorName = "Tầng B2",
                            IsActive = true,
                            ParkingId = 1
                        },
                        new
                        {
                            FloorId = 3,
                            FloorName = "Tầng B3",
                            IsActive = true,
                            ParkingId = 1
                        },
                        new
                        {
                            FloorId = 4,
                            FloorName = "Khu A",
                            IsActive = true,
                            ParkingId = 2
                        },
                        new
                        {
                            FloorId = 5,
                            FloorName = "Khu B",
                            IsActive = true,
                            ParkingId = 2
                        });
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Parking", b =>
                {
                    b.Property<int>("ParkingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParkingId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("BusinessId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessId");

                    b.Property<int?>("CarSpot")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFull")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOvernight")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPrepayment")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10,6)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(10,6)");

                    b.Property<int?>("MotoSpot")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float?>("Stars")
                        .HasColumnType("real");

                    b.Property<int?>("StarsCount")
                        .HasColumnType("int");

                    b.Property<float?>("TotalStars")
                        .HasColumnType("real");

                    b.HasKey("ParkingId");

                    b.HasIndex("BusinessId");

                    b.ToTable("Parking", (string)null);

                    b.HasData(
                        new
                        {
                            ParkingId = 1,
                            Address = "123 Đường ABC, Quận 1, TP. Hồ Chí Minh",
                            BusinessId = 1,
                            CarSpot = 30,
                            Code = "PARK001",
                            Description = "Bãi đỗ xe hiện đại với hệ thống camera giám sát",
                            IsActive = true,
                            IsAvailable = true,
                            IsFull = false,
                            IsOvernight = true,
                            IsPrepayment = true,
                            Latitude = 10.7769m,
                            Longitude = 106.7009m,
                            MotoSpot = 50,
                            Name = "Bãi đỗ xe ABC - Tầng hầm",
                            Stars = 4.5f,
                            StarsCount = 10,
                            TotalStars = 45f
                        },
                        new
                        {
                            ParkingId = 2,
                            Address = "456 Đường XYZ, Quận 2, TP. Hồ Chí Minh",
                            BusinessId = 2,
                            CarSpot = 20,
                            Code = "PARK002",
                            Description = "Bãi đỗ xe ngoài trời với giá cả hợp lý",
                            IsActive = true,
                            IsAvailable = true,
                            IsFull = false,
                            IsOvernight = false,
                            IsPrepayment = false,
                            Latitude = 10.7879m,
                            Longitude = 106.7119m,
                            MotoSpot = 30,
                            Name = "Bãi đỗ xe XYZ - Tầng trệt",
                            Stars = 4f,
                            StarsCount = 8,
                            TotalStars = 32f
                        });
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ParkingHasPrice", b =>
                {
                    b.Property<int>("ParkingHasPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParkingHasPriceId"), 1L, 1);

                    b.Property<int?>("ParkingId")
                        .HasColumnType("int");

                    b.Property<int?>("ParkingPriceId")
                        .HasColumnType("int");

                    b.HasKey("ParkingHasPriceId");

                    b.HasIndex("ParkingId");

                    b.HasIndex("ParkingPriceId");

                    b.ToTable("ParkingHasPrice", (string)null);

                    b.HasData(
                        new
                        {
                            ParkingHasPriceId = 1,
                            ParkingId = 1,
                            ParkingPriceId = 1
                        },
                        new
                        {
                            ParkingHasPriceId = 2,
                            ParkingId = 1,
                            ParkingPriceId = 2
                        },
                        new
                        {
                            ParkingHasPriceId = 3,
                            ParkingId = 1,
                            ParkingPriceId = 3
                        },
                        new
                        {
                            ParkingHasPriceId = 4,
                            ParkingId = 1,
                            ParkingPriceId = 4
                        },
                        new
                        {
                            ParkingHasPriceId = 5,
                            ParkingId = 2,
                            ParkingPriceId = 5
                        },
                        new
                        {
                            ParkingHasPriceId = 6,
                            ParkingId = 2,
                            ParkingPriceId = 6
                        });
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ParkingPrice", b =>
                {
                    b.Property<int>("ParkingPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParkingPriceId"), 1L, 1);

                    b.Property<int?>("BusinessId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessId");

                    b.Property<float?>("ExtraTimeStep")
                        .HasColumnType("real");

                    b.Property<bool?>("HasPenaltyPrice")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExtrafee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWholeDay")
                        .HasColumnType("bit");

                    b.Property<string>("ParkingPriceName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal?>("PenaltyPrice")
                        .HasColumnType("money");

                    b.Property<float?>("PenaltyPriceStepTime")
                        .HasColumnType("real");

                    b.Property<int?>("StartingTime")
                        .HasColumnType("int")
                        .HasColumnName("StartingTime");

                    b.Property<int?>("TrafficId")
                        .HasColumnType("int");

                    b.HasKey("ParkingPriceId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("TrafficId");

                    b.ToTable("ParkingPrice", (string)null);

                    b.HasData(
                        new
                        {
                            ParkingPriceId = 1,
                            BusinessId = 1,
                            ExtraTimeStep = 15f,
                            HasPenaltyPrice = true,
                            IsActive = true,
                            IsExtrafee = true,
                            IsWholeDay = false,
                            ParkingPriceName = "Giá xe ô tô - Giờ",
                            PenaltyPrice = 5000m,
                            PenaltyPriceStepTime = 15f,
                            StartingTime = 0,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingPriceId = 2,
                            BusinessId = 1,
                            HasPenaltyPrice = false,
                            IsActive = true,
                            IsExtrafee = false,
                            IsWholeDay = true,
                            ParkingPriceName = "Giá xe ô tô - Ngày",
                            StartingTime = 0,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingPriceId = 3,
                            BusinessId = 1,
                            ExtraTimeStep = 15f,
                            HasPenaltyPrice = true,
                            IsActive = true,
                            IsExtrafee = true,
                            IsWholeDay = false,
                            ParkingPriceName = "Giá xe máy - Giờ",
                            PenaltyPrice = 2000m,
                            PenaltyPriceStepTime = 15f,
                            StartingTime = 0,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingPriceId = 4,
                            BusinessId = 1,
                            HasPenaltyPrice = false,
                            IsActive = true,
                            IsExtrafee = false,
                            IsWholeDay = true,
                            ParkingPriceName = "Giá xe máy - Ngày",
                            StartingTime = 0,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingPriceId = 5,
                            BusinessId = 2,
                            ExtraTimeStep = 15f,
                            HasPenaltyPrice = true,
                            IsActive = true,
                            IsExtrafee = true,
                            IsWholeDay = false,
                            ParkingPriceName = "Giá xe ô tô - Giờ",
                            PenaltyPrice = 3000m,
                            PenaltyPriceStepTime = 15f,
                            StartingTime = 0,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingPriceId = 6,
                            BusinessId = 2,
                            ExtraTimeStep = 15f,
                            HasPenaltyPrice = true,
                            IsActive = true,
                            IsExtrafee = true,
                            IsWholeDay = false,
                            ParkingPriceName = "Giá xe máy - Giờ",
                            PenaltyPrice = 1000m,
                            PenaltyPriceStepTime = 15f,
                            StartingTime = 0,
                            TrafficId = 2
                        });
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ParkingSlot", b =>
                {
                    b.Property<int>("ParkingSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParkingSlotId"), 1L, 1);

                    b.Property<int?>("ColumnIndex")
                        .HasColumnType("int");

                    b.Property<int?>("FloorId")
                        .HasColumnType("int")
                        .HasColumnName("FloorID");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsBackup")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<int?>("RowIndex")
                        .HasColumnType("int");

                    b.Property<int?>("TrafficId")
                        .HasColumnType("int")
                        .HasColumnName("TrafficID");

                    b.HasKey("ParkingSlotId");

                    b.HasIndex(new[] { "FloorId" }, "IX_ParkingSlots_FloorID");

                    b.HasIndex(new[] { "TrafficId" }, "IX_ParkingSlots_TrafficID");

                    b.ToTable("ParkingSlots");

                    b.HasData(
                        new
                        {
                            ParkingSlotId = 1,
                            ColumnIndex = 1,
                            FloorId = 1,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "A01",
                            RowIndex = 1,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 2,
                            ColumnIndex = 2,
                            FloorId = 1,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "A02",
                            RowIndex = 1,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 3,
                            ColumnIndex = 3,
                            FloorId = 1,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "A03",
                            RowIndex = 1,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 4,
                            ColumnIndex = 4,
                            FloorId = 1,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "A04",
                            RowIndex = 1,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 5,
                            ColumnIndex = 5,
                            FloorId = 1,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "A05",
                            RowIndex = 1,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 6,
                            ColumnIndex = 1,
                            FloorId = 1,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "A06",
                            RowIndex = 2,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 7,
                            ColumnIndex = 2,
                            FloorId = 1,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "A07",
                            RowIndex = 2,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 8,
                            ColumnIndex = 3,
                            FloorId = 1,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "A08",
                            RowIndex = 2,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 9,
                            ColumnIndex = 4,
                            FloorId = 1,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "A09",
                            RowIndex = 2,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 10,
                            ColumnIndex = 5,
                            FloorId = 1,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "A10",
                            RowIndex = 2,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 11,
                            ColumnIndex = 1,
                            FloorId = 1,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "A11",
                            RowIndex = 3,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 12,
                            ColumnIndex = 2,
                            FloorId = 1,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "A12",
                            RowIndex = 3,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 13,
                            ColumnIndex = 3,
                            FloorId = 1,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "A13",
                            RowIndex = 3,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 14,
                            ColumnIndex = 4,
                            FloorId = 1,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "A14",
                            RowIndex = 3,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 15,
                            ColumnIndex = 5,
                            FloorId = 1,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "A15",
                            RowIndex = 3,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 16,
                            ColumnIndex = 1,
                            FloorId = 1,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "A16",
                            RowIndex = 4,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 17,
                            ColumnIndex = 2,
                            FloorId = 1,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "A17",
                            RowIndex = 4,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 18,
                            ColumnIndex = 3,
                            FloorId = 1,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "A18",
                            RowIndex = 4,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 19,
                            ColumnIndex = 4,
                            FloorId = 1,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "A19",
                            RowIndex = 4,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 20,
                            ColumnIndex = 5,
                            FloorId = 1,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "A20",
                            RowIndex = 4,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 21,
                            ColumnIndex = 1,
                            FloorId = 2,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "B01",
                            RowIndex = 1,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 22,
                            ColumnIndex = 2,
                            FloorId = 2,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "B02",
                            RowIndex = 1,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 23,
                            ColumnIndex = 3,
                            FloorId = 2,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "B03",
                            RowIndex = 1,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 24,
                            ColumnIndex = 4,
                            FloorId = 2,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "B04",
                            RowIndex = 1,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 25,
                            ColumnIndex = 5,
                            FloorId = 2,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "B05",
                            RowIndex = 1,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 26,
                            ColumnIndex = 1,
                            FloorId = 2,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "B06",
                            RowIndex = 2,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 27,
                            ColumnIndex = 2,
                            FloorId = 2,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "B07",
                            RowIndex = 2,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 28,
                            ColumnIndex = 3,
                            FloorId = 2,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "B08",
                            RowIndex = 2,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 29,
                            ColumnIndex = 4,
                            FloorId = 2,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "B09",
                            RowIndex = 2,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 30,
                            ColumnIndex = 5,
                            FloorId = 2,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "B10",
                            RowIndex = 2,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 31,
                            ColumnIndex = 1,
                            FloorId = 2,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "B11",
                            RowIndex = 3,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 32,
                            ColumnIndex = 2,
                            FloorId = 2,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "B12",
                            RowIndex = 3,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 33,
                            ColumnIndex = 3,
                            FloorId = 2,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "B13",
                            RowIndex = 3,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 34,
                            ColumnIndex = 4,
                            FloorId = 2,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "B14",
                            RowIndex = 3,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 35,
                            ColumnIndex = 5,
                            FloorId = 2,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "B15",
                            RowIndex = 3,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 36,
                            ColumnIndex = 1,
                            FloorId = 2,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "B16",
                            RowIndex = 4,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 37,
                            ColumnIndex = 2,
                            FloorId = 2,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "B17",
                            RowIndex = 4,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 38,
                            ColumnIndex = 3,
                            FloorId = 2,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "B18",
                            RowIndex = 4,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 39,
                            ColumnIndex = 4,
                            FloorId = 2,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "B19",
                            RowIndex = 4,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 40,
                            ColumnIndex = 5,
                            FloorId = 2,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "B20",
                            RowIndex = 4,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 41,
                            ColumnIndex = 1,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M01",
                            RowIndex = 1,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 42,
                            ColumnIndex = 2,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M02",
                            RowIndex = 1,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 43,
                            ColumnIndex = 3,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M03",
                            RowIndex = 1,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 44,
                            ColumnIndex = 4,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M04",
                            RowIndex = 1,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 45,
                            ColumnIndex = 5,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M05",
                            RowIndex = 1,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 46,
                            ColumnIndex = 6,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M06",
                            RowIndex = 1,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 47,
                            ColumnIndex = 7,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M07",
                            RowIndex = 1,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 48,
                            ColumnIndex = 8,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M08",
                            RowIndex = 1,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 49,
                            ColumnIndex = 9,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M09",
                            RowIndex = 1,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 50,
                            ColumnIndex = 10,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M10",
                            RowIndex = 1,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 51,
                            ColumnIndex = 1,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M11",
                            RowIndex = 2,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 52,
                            ColumnIndex = 2,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M12",
                            RowIndex = 2,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 53,
                            ColumnIndex = 3,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M13",
                            RowIndex = 2,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 54,
                            ColumnIndex = 4,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M14",
                            RowIndex = 2,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 55,
                            ColumnIndex = 5,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M15",
                            RowIndex = 2,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 56,
                            ColumnIndex = 6,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M16",
                            RowIndex = 2,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 57,
                            ColumnIndex = 7,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M17",
                            RowIndex = 2,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 58,
                            ColumnIndex = 8,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M18",
                            RowIndex = 2,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 59,
                            ColumnIndex = 9,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M19",
                            RowIndex = 2,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 60,
                            ColumnIndex = 10,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M20",
                            RowIndex = 2,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 61,
                            ColumnIndex = 1,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M21",
                            RowIndex = 3,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 62,
                            ColumnIndex = 2,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M22",
                            RowIndex = 3,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 63,
                            ColumnIndex = 3,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M23",
                            RowIndex = 3,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 64,
                            ColumnIndex = 4,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M24",
                            RowIndex = 3,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 65,
                            ColumnIndex = 5,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M25",
                            RowIndex = 3,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 66,
                            ColumnIndex = 6,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M26",
                            RowIndex = 3,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 67,
                            ColumnIndex = 7,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M27",
                            RowIndex = 3,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 68,
                            ColumnIndex = 8,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M28",
                            RowIndex = 3,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 69,
                            ColumnIndex = 9,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M29",
                            RowIndex = 3,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 70,
                            ColumnIndex = 10,
                            FloorId = 3,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "M30",
                            RowIndex = 3,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 71,
                            ColumnIndex = 1,
                            FloorId = 4,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "C01",
                            RowIndex = 1,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 72,
                            ColumnIndex = 2,
                            FloorId = 4,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "C02",
                            RowIndex = 1,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 73,
                            ColumnIndex = 3,
                            FloorId = 4,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "C03",
                            RowIndex = 1,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 74,
                            ColumnIndex = 4,
                            FloorId = 4,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "C04",
                            RowIndex = 1,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 75,
                            ColumnIndex = 5,
                            FloorId = 4,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "C05",
                            RowIndex = 1,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 76,
                            ColumnIndex = 1,
                            FloorId = 4,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "C06",
                            RowIndex = 2,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 77,
                            ColumnIndex = 2,
                            FloorId = 4,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "C07",
                            RowIndex = 2,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 78,
                            ColumnIndex = 3,
                            FloorId = 4,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "C08",
                            RowIndex = 2,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 79,
                            ColumnIndex = 4,
                            FloorId = 4,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "C09",
                            RowIndex = 2,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 80,
                            ColumnIndex = 5,
                            FloorId = 4,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "C10",
                            RowIndex = 2,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 81,
                            ColumnIndex = 1,
                            FloorId = 4,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "C11",
                            RowIndex = 3,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 82,
                            ColumnIndex = 2,
                            FloorId = 4,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "C12",
                            RowIndex = 3,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 83,
                            ColumnIndex = 3,
                            FloorId = 4,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "C13",
                            RowIndex = 3,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 84,
                            ColumnIndex = 4,
                            FloorId = 4,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "C14",
                            RowIndex = 3,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 85,
                            ColumnIndex = 5,
                            FloorId = 4,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "C15",
                            RowIndex = 3,
                            TrafficId = 1
                        },
                        new
                        {
                            ParkingSlotId = 86,
                            ColumnIndex = 1,
                            FloorId = 5,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "D01",
                            RowIndex = 1,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 87,
                            ColumnIndex = 2,
                            FloorId = 5,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "D02",
                            RowIndex = 1,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 88,
                            ColumnIndex = 3,
                            FloorId = 5,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "D03",
                            RowIndex = 1,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 89,
                            ColumnIndex = 4,
                            FloorId = 5,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "D04",
                            RowIndex = 1,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 90,
                            ColumnIndex = 5,
                            FloorId = 5,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "D05",
                            RowIndex = 1,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 91,
                            ColumnIndex = 1,
                            FloorId = 5,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "D06",
                            RowIndex = 2,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 92,
                            ColumnIndex = 2,
                            FloorId = 5,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "D07",
                            RowIndex = 2,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 93,
                            ColumnIndex = 3,
                            FloorId = 5,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "D08",
                            RowIndex = 2,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 94,
                            ColumnIndex = 4,
                            FloorId = 5,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "D09",
                            RowIndex = 2,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 95,
                            ColumnIndex = 5,
                            FloorId = 5,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "D10",
                            RowIndex = 2,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 96,
                            ColumnIndex = 1,
                            FloorId = 5,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "D11",
                            RowIndex = 3,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 97,
                            ColumnIndex = 2,
                            FloorId = 5,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "D12",
                            RowIndex = 3,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 98,
                            ColumnIndex = 3,
                            FloorId = 5,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "D13",
                            RowIndex = 3,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 99,
                            ColumnIndex = 4,
                            FloorId = 5,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "D14",
                            RowIndex = 3,
                            TrafficId = 2
                        },
                        new
                        {
                            ParkingSlotId = 100,
                            ColumnIndex = 5,
                            FloorId = 5,
                            IsAvailable = true,
                            IsBackup = false,
                            Name = "D15",
                            RowIndex = 3,
                            TrafficId = 2
                        });
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ParkingSpotImage", b =>
                {
                    b.Property<int>("ParkingSpotImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParkingSpotImageId"), 1L, 1);

                    b.Property<string>("ImgPath")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ParkingId")
                        .HasColumnType("int")
                        .HasColumnName("ParkingID");

                    b.HasKey("ParkingSpotImageId");

                    b.HasIndex(new[] { "ParkingId" }, "IX_ParkingSpotImage_ParkingID");

                    b.ToTable("ParkingSpotImage", (string)null);
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.PayPal", b =>
                {
                    b.Property<int>("PayPalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayPalId"), 1L, 1);

                    b.Property<string>("ClientId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("ManagerID");

                    b.Property<string>("SecretKey")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("PayPalId");

                    b.HasIndex(new[] { "ManagerId" }, "IX_PayPal_ManagerID");

                    b.ToTable("PayPal", (string)null);
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            IsActive = true,
                            Name = "Manager"
                        },
                        new
                        {
                            RoleId = 2,
                            IsActive = true,
                            Name = "Keeper"
                        },
                        new
                        {
                            RoleId = 3,
                            IsActive = true,
                            Name = "Customer"
                        },
                        new
                        {
                            RoleId = 4,
                            IsActive = true,
                            Name = "Staff"
                        });
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.TimeLine", b =>
                {
                    b.Property<int>("TimeLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeLineId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<decimal?>("ExtraFee")
                        .HasColumnType("money");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParkingPriceId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("TimeLineId");

                    b.HasIndex("ParkingPriceId");

                    b.ToTable("TimeLine", (string)null);
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.TimeSlot", b =>
                {
                    b.Property<int>("TimeSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeSlotId"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParkingSlotId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TimeSlotId");

                    b.HasIndex("ParkingSlotId");

                    b.ToTable("TimeSlot", (string)null);

                    b.HasData(
                        new
                        {
                            TimeSlotId = 1,
                            CreatedDate = new DateTime(2025, 9, 22, 7, 37, 15, 879, DateTimeKind.Local).AddTicks(649),
                            EndTime = new DateTime(2024, 1, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            ParkingSlotId = 1,
                            StartTime = new DateTime(2024, 1, 1, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active"
                        },
                        new
                        {
                            TimeSlotId = 2,
                            CreatedDate = new DateTime(2025, 9, 22, 7, 37, 15, 879, DateTimeKind.Local).AddTicks(657),
                            EndTime = new DateTime(2024, 1, 2, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            ParkingSlotId = 1,
                            StartTime = new DateTime(2024, 1, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Traffic", b =>
                {
                    b.Property<int>("TrafficId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrafficId"), 1L, 1);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TrafficId");

                    b.ToTable("VehicleType", (string)null);

                    b.HasData(
                        new
                        {
                            TrafficId = 1,
                            IsActive = true,
                            Name = "Xe ô tô"
                        },
                        new
                        {
                            TrafficId = 2,
                            IsActive = true,
                            Name = "Xe máy"
                        },
                        new
                        {
                            TrafficId = 3,
                            IsActive = true,
                            Name = "Xe đạp"
                        });
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"), 1L, 1);

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("BookingId");

                    b.HasIndex("WalletId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("BanCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Devicetoken")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("IdCardDate")
                        .HasColumnType("date");

                    b.Property<string>("IdCardIssuedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IdCardNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCensorship")
                        .HasColumnType("bit");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("ManagerID");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParkingId")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("varbinary(255)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasMaxLength(255)
                        .HasColumnType("varbinary(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.HasKey("UserId");

                    b.HasIndex("ParkingId");

                    b.HasIndex(new[] { "ManagerId" }, "IX_Users_ManagerID");

                    b.HasIndex(new[] { "RoleId" }, "IX_Users_RoleID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "Hà Nội, Việt Nam",
                            Avatar = "https://via.placeholder.com/150",
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@parkz.com",
                            Gender = "Nam",
                            IsActive = true,
                            IsCensorship = true,
                            Name = "Admin",
                            PasswordHash = new byte[] { 50, 186, 174, 33, 172, 87, 8, 31, 32, 119, 13, 22, 229, 227, 254, 250, 63, 36, 146, 156, 57, 223, 8, 28, 57, 158, 229, 105, 177, 84, 145, 148, 126, 91, 205, 190, 159, 151, 28, 135, 98, 133, 137, 127, 137, 73, 121, 114, 21, 206, 172, 148, 53, 0, 69, 127, 71, 74, 3, 121, 85, 194, 30, 97 },
                            PasswordSalt = new byte[] { 247, 31, 84, 65, 28, 145, 194, 0, 31, 239, 124, 50, 46, 189, 97, 57, 170, 246, 128, 85, 17, 141, 186, 54, 104, 193, 165, 109, 247, 215, 14, 225, 196, 93, 14, 57, 149, 32, 25, 248, 8, 7, 205, 93, 19, 219, 38, 216, 109, 110, 206, 52, 219, 83, 161, 202, 94, 241, 18, 240, 5, 179, 76, 109, 237, 2, 75, 72, 240, 22, 61, 239, 201, 179, 64, 63, 61, 154, 24, 237, 229, 213, 149, 7, 1, 167, 59, 119, 50, 203, 105, 73, 195, 14, 191, 139, 58, 143, 126, 128, 248, 251, 143, 85, 8, 236, 60, 71, 214, 16, 175, 108, 242, 101, 192, 176, 106, 237, 215, 209, 72, 170, 138, 86, 71, 205, 119, 73 },
                            Phone = "0123456789",
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            Address = "TP. Hồ Chí Minh, Việt Nam",
                            Avatar = "https://via.placeholder.com/150",
                            DateOfBirth = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "manager1@parkz.com",
                            Gender = "Nam",
                            IsActive = true,
                            IsCensorship = true,
                            Name = "Nguyễn Văn A",
                            PasswordHash = new byte[] { 50, 186, 174, 33, 172, 87, 8, 31, 32, 119, 13, 22, 229, 227, 254, 250, 63, 36, 146, 156, 57, 223, 8, 28, 57, 158, 229, 105, 177, 84, 145, 148, 126, 91, 205, 190, 159, 151, 28, 135, 98, 133, 137, 127, 137, 73, 121, 114, 21, 206, 172, 148, 53, 0, 69, 127, 71, 74, 3, 121, 85, 194, 30, 97 },
                            PasswordSalt = new byte[] { 247, 31, 84, 65, 28, 145, 194, 0, 31, 239, 124, 50, 46, 189, 97, 57, 170, 246, 128, 85, 17, 141, 186, 54, 104, 193, 165, 109, 247, 215, 14, 225, 196, 93, 14, 57, 149, 32, 25, 248, 8, 7, 205, 93, 19, 219, 38, 216, 109, 110, 206, 52, 219, 83, 161, 202, 94, 241, 18, 240, 5, 179, 76, 109, 237, 2, 75, 72, 240, 22, 61, 239, 201, 179, 64, 63, 61, 154, 24, 237, 229, 213, 149, 7, 1, 167, 59, 119, 50, 203, 105, 73, 195, 14, 191, 139, 58, 143, 126, 128, 248, 251, 143, 85, 8, 236, 60, 71, 214, 16, 175, 108, 242, 101, 192, 176, 106, 237, 215, 209, 72, 170, 138, 86, 71, 205, 119, 73 },
                            Phone = "0123456788",
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            Address = "Đà Nẵng, Việt Nam",
                            Avatar = "https://via.placeholder.com/150",
                            DateOfBirth = new DateTime(1992, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "staff1@parkz.com",
                            Gender = "Nữ",
                            IsActive = true,
                            IsCensorship = true,
                            ManagerId = 2,
                            Name = "Trần Thị B",
                            PasswordHash = new byte[] { 50, 186, 174, 33, 172, 87, 8, 31, 32, 119, 13, 22, 229, 227, 254, 250, 63, 36, 146, 156, 57, 223, 8, 28, 57, 158, 229, 105, 177, 84, 145, 148, 126, 91, 205, 190, 159, 151, 28, 135, 98, 133, 137, 127, 137, 73, 121, 114, 21, 206, 172, 148, 53, 0, 69, 127, 71, 74, 3, 121, 85, 194, 30, 97 },
                            PasswordSalt = new byte[] { 247, 31, 84, 65, 28, 145, 194, 0, 31, 239, 124, 50, 46, 189, 97, 57, 170, 246, 128, 85, 17, 141, 186, 54, 104, 193, 165, 109, 247, 215, 14, 225, 196, 93, 14, 57, 149, 32, 25, 248, 8, 7, 205, 93, 19, 219, 38, 216, 109, 110, 206, 52, 219, 83, 161, 202, 94, 241, 18, 240, 5, 179, 76, 109, 237, 2, 75, 72, 240, 22, 61, 239, 201, 179, 64, 63, 61, 154, 24, 237, 229, 213, 149, 7, 1, 167, 59, 119, 50, 203, 105, 73, 195, 14, 191, 139, 58, 143, 126, 128, 248, 251, 143, 85, 8, 236, 60, 71, 214, 16, 175, 108, 242, 101, 192, 176, 106, 237, 215, 209, 72, 170, 138, 86, 71, 205, 119, 73 },
                            Phone = "0123456787",
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 4,
                            Address = "Hải Phòng, Việt Nam",
                            Avatar = "https://via.placeholder.com/150",
                            DateOfBirth = new DateTime(1988, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "keeper1@parkz.com",
                            Gender = "Nam",
                            IsActive = true,
                            IsCensorship = true,
                            ManagerId = 2,
                            Name = "Lê Văn C",
                            PasswordHash = new byte[] { 50, 186, 174, 33, 172, 87, 8, 31, 32, 119, 13, 22, 229, 227, 254, 250, 63, 36, 146, 156, 57, 223, 8, 28, 57, 158, 229, 105, 177, 84, 145, 148, 126, 91, 205, 190, 159, 151, 28, 135, 98, 133, 137, 127, 137, 73, 121, 114, 21, 206, 172, 148, 53, 0, 69, 127, 71, 74, 3, 121, 85, 194, 30, 97 },
                            PasswordSalt = new byte[] { 247, 31, 84, 65, 28, 145, 194, 0, 31, 239, 124, 50, 46, 189, 97, 57, 170, 246, 128, 85, 17, 141, 186, 54, 104, 193, 165, 109, 247, 215, 14, 225, 196, 93, 14, 57, 149, 32, 25, 248, 8, 7, 205, 93, 19, 219, 38, 216, 109, 110, 206, 52, 219, 83, 161, 202, 94, 241, 18, 240, 5, 179, 76, 109, 237, 2, 75, 72, 240, 22, 61, 239, 201, 179, 64, 63, 61, 154, 24, 237, 229, 213, 149, 7, 1, 167, 59, 119, 50, 203, 105, 73, 195, 14, 191, 139, 58, 143, 126, 128, 248, 251, 143, 85, 8, 236, 60, 71, 214, 16, 175, 108, 242, 101, 192, 176, 106, 237, 215, 209, 72, 170, 138, 86, 71, 205, 119, 73 },
                            Phone = "0123456786",
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            Address = "Cần Thơ, Việt Nam",
                            Avatar = "https://via.placeholder.com/150",
                            DateOfBirth = new DateTime(1995, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer1@parkz.com",
                            Gender = "Nữ",
                            IsActive = true,
                            IsCensorship = true,
                            Name = "Phạm Thị D",
                            PasswordHash = new byte[] { 50, 186, 174, 33, 172, 87, 8, 31, 32, 119, 13, 22, 229, 227, 254, 250, 63, 36, 146, 156, 57, 223, 8, 28, 57, 158, 229, 105, 177, 84, 145, 148, 126, 91, 205, 190, 159, 151, 28, 135, 98, 133, 137, 127, 137, 73, 121, 114, 21, 206, 172, 148, 53, 0, 69, 127, 71, 74, 3, 121, 85, 194, 30, 97 },
                            PasswordSalt = new byte[] { 247, 31, 84, 65, 28, 145, 194, 0, 31, 239, 124, 50, 46, 189, 97, 57, 170, 246, 128, 85, 17, 141, 186, 54, 104, 193, 165, 109, 247, 215, 14, 225, 196, 93, 14, 57, 149, 32, 25, 248, 8, 7, 205, 93, 19, 219, 38, 216, 109, 110, 206, 52, 219, 83, 161, 202, 94, 241, 18, 240, 5, 179, 76, 109, 237, 2, 75, 72, 240, 22, 61, 239, 201, 179, 64, 63, 61, 154, 24, 237, 229, 213, 149, 7, 1, 167, 59, 119, 50, 203, 105, 73, 195, 14, 191, 139, 58, 143, 126, 128, 248, 251, 143, 85, 8, 236, 60, 71, 214, 16, 175, 108, 242, 101, 192, 176, 106, 237, 215, 209, 72, 170, 138, 86, 71, 205, 119, 73 },
                            Phone = "0123456785",
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.VehicleInfor", b =>
                {
                    b.Property<int>("VehicleInforId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleInforId"), 1L, 1);

                    b.Property<string>("Color")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<string>("LicensePlate")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<int?>("TrafficId")
                        .HasColumnType("int")
                        .HasColumnName("TrafficID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("VehicleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VehicleInforId");

                    b.HasIndex(new[] { "TrafficId" }, "IX_VehicleInfor_TrafficID");

                    b.HasIndex(new[] { "UserId" }, "IX_VehicleInfor_UserID");

                    b.ToTable("Vehicle", (string)null);

                    b.HasData(
                        new
                        {
                            VehicleInforId = 1,
                            Color = "Đỏ",
                            LicensePlate = "29A1-12345",
                            TrafficId = 2,
                            UserId = 5,
                            VehicleName = "Honda Wave RSX"
                        },
                        new
                        {
                            VehicleInforId = 2,
                            Color = "Trắng",
                            LicensePlate = "30A1-67890",
                            TrafficId = 1,
                            UserId = 5,
                            VehicleName = "Toyota Vios"
                        });
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.VnPay", b =>
                {
                    b.Property<int>("VnPayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VnPayId"), 1L, 1);

                    b.Property<string>("HashSecret")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TmnCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("VnPayId");

                    b.HasIndex(new[] { "UserId" }, "IX_userId_VnPay");

                    b.ToTable("VnPay", (string)null);
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"), 1L, 1);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Debt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WalletId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Wallets");

                    b.HasData(
                        new
                        {
                            WalletId = 1,
                            Balance = 0m,
                            Debt = 0m
                        },
                        new
                        {
                            WalletId = 2,
                            Balance = 500000m,
                            Debt = 0m,
                            UserId = 2
                        },
                        new
                        {
                            WalletId = 3,
                            Balance = 200000m,
                            Debt = 0m,
                            UserId = 3
                        },
                        new
                        {
                            WalletId = 4,
                            Balance = 150000m,
                            Debt = 0m,
                            UserId = 4
                        },
                        new
                        {
                            WalletId = 5,
                            Balance = 300000m,
                            Debt = 0m,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ApproveParking", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Parking", "Parking")
                        .WithMany("ApproveParkings")
                        .HasForeignKey("ParkingId")
                        .HasConstraintName("FK_Parking_ApproveParkings");

                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.User", "User")
                        .WithMany("ApproveParkings")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_User_ApproveParkings");

                    b.Navigation("Parking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Bill", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.BusinessProfile", "businessProfile")
                        .WithMany("Bills")
                        .HasForeignKey("BusinessId")
                        .HasConstraintName("FK_businessPro_Bills");

                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Wallet", "Wallet")
                        .WithMany("Bills")
                        .HasForeignKey("WalletId")
                        .HasConstraintName("FK_Wallet_Bills");

                    b.Navigation("Wallet");

                    b.Navigation("businessProfile");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Booking", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Booking__UserID__5070F446");

                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.VehicleInfor", "VehicleInfor")
                        .WithMany("Bookings")
                        .HasForeignKey("VehicleInforId")
                        .HasConstraintName("FK__Booking__Vehicle");

                    b.Navigation("User");

                    b.Navigation("VehicleInfor");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.BookingDetails", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Booking", "Booking")
                        .WithMany("BookingDetails")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK__Booking__BookingDetails");

                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.TimeSlot", "TimeSlot")
                        .WithMany("BookingDetails")
                        .HasForeignKey("TimeSlotId")
                        .HasConstraintName("FK__TimeSlot__BookingDetails");

                    b.Navigation("Booking");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.BusinessProfile", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Fee", "Fee")
                        .WithMany("BusinessProfiles")
                        .HasForeignKey("FeeId")
                        .HasConstraintName("FK_Fee_BusinessProfiles");

                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.User", "User")
                        .WithOne("BusinessProfile")
                        .HasForeignKey("Parking.FindingSlotManagement.Domain.Entities.BusinessProfile", "UserId")
                        .HasConstraintName("fk_IsManager");

                    b.Navigation("Fee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.FavoriteAddress", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.User", "User")
                        .WithMany("FavoriteAddresses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__FavoriteA__UserI__33D4B598");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.FieldWorkParkingImg", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.ApproveParking", "ApproveParking")
                        .WithMany("FieldWorkParkingImgs")
                        .HasForeignKey("ApproveParkingId")
                        .HasConstraintName("FK_ApprovePar_FieldWorkPas");

                    b.Navigation("ApproveParking");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Floor", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Parking", "Parking")
                        .WithMany("Floors")
                        .HasForeignKey("ParkingId")
                        .HasConstraintName("FK__Floors__ParkingI__47DBAE45");

                    b.Navigation("Parking");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Parking", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.BusinessProfile", "BusinessProfile")
                        .WithMany("Parkings")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__BusiessPro__Parking");

                    b.Navigation("BusinessProfile");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ParkingHasPrice", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Parking", "Parking")
                        .WithMany("ParkingHasPrices")
                        .HasForeignKey("ParkingId")
                        .HasConstraintName("FK_ParkingHasPrice_Parking");

                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.ParkingPrice", "ParkingPrice")
                        .WithMany("ParkingHasPrices")
                        .HasForeignKey("ParkingPriceId")
                        .HasConstraintName("FK_ParkingHasPrice_ParkingPrice");

                    b.Navigation("Parking");

                    b.Navigation("ParkingPrice");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ParkingPrice", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.BusinessProfile", "BusinessProfile")
                        .WithMany("ParkingPrices")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Business__ParkingPri");

                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Traffic", "Traffic")
                        .WithMany("ParkingPrices")
                        .HasForeignKey("TrafficId")
                        .HasConstraintName("FK__VehicleTy_Parkingpri");

                    b.Navigation("BusinessProfile");

                    b.Navigation("Traffic");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ParkingSlot", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Floor", "Floor")
                        .WithMany("ParkingSlots")
                        .HasForeignKey("FloorId")
                        .HasConstraintName("FK__ParkingSl__Floor__5441852A");

                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Traffic", "Traffic")
                        .WithMany("ParkingSlots")
                        .HasForeignKey("TrafficId")
                        .HasConstraintName("FK__ParkingSl__Traff");

                    b.Navigation("Floor");

                    b.Navigation("Traffic");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ParkingSpotImage", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Parking", "Parking")
                        .WithMany("ParkingSpotImages")
                        .HasForeignKey("ParkingId")
                        .HasConstraintName("FK__ParkingSp__Parki__3C69FB99");

                    b.Navigation("Parking");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.PayPal", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.User", "Manager")
                        .WithMany("PayPals")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK__PayPal__ManagerI__2D27B809");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.TimeLine", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.ParkingPrice", "ParkingPrice")
                        .WithMany("TimeLines")
                        .HasForeignKey("ParkingPriceId")
                        .HasConstraintName("FK_Timeline_ParkingPrice");

                    b.Navigation("ParkingPrice");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.TimeSlot", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.ParkingSlot", "Parkingslot")
                        .WithMany("TimeSlots")
                        .HasForeignKey("ParkingSlotId")
                        .HasConstraintName("FK_Parkingslot_BookedSlots");

                    b.Navigation("Parkingslot");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Booking", "Booking")
                        .WithMany("Transactions")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK_Booking_BookingPayments");

                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .HasConstraintName("FK_Wallet_BookingPayments");

                    b.Navigation("Booking");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.User", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.User", "Manager")
                        .WithMany("InverseManager")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK__Users__ManagerID__267ABA7A");

                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Parking", "Parking")
                        .WithMany("Users")
                        .HasForeignKey("ParkingId")
                        .HasConstraintName("FK__Parking__Users");

                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__Users__RoleID__276EDEB3");

                    b.Navigation("Manager");

                    b.Navigation("Parking");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.VehicleInfor", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.Traffic", "Traffic")
                        .WithMany("VehicleInfors")
                        .HasForeignKey("TrafficId")
                        .HasConstraintName("FK__VehicleIn__Traff");

                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.User", "User")
                        .WithMany("VehicleInfors")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__VehicleIn__UserI__4AB81AF0");

                    b.Navigation("Traffic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.VnPay", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.User", "User")
                        .WithMany("VnPays")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__VnPay__User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Wallet", b =>
                {
                    b.HasOne("Parking.FindingSlotManagement.Domain.Entities.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("Parking.FindingSlotManagement.Domain.Entities.Wallet", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ApproveParking", b =>
                {
                    b.Navigation("FieldWorkParkingImgs");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Booking", b =>
                {
                    b.Navigation("BookingDetails");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.BusinessProfile", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("ParkingPrices");

                    b.Navigation("Parkings");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Fee", b =>
                {
                    b.Navigation("BusinessProfiles");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Floor", b =>
                {
                    b.Navigation("ParkingSlots");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Parking", b =>
                {
                    b.Navigation("ApproveParkings");

                    b.Navigation("Floors");

                    b.Navigation("ParkingHasPrices");

                    b.Navigation("ParkingSpotImages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ParkingPrice", b =>
                {
                    b.Navigation("ParkingHasPrices");

                    b.Navigation("TimeLines");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.ParkingSlot", b =>
                {
                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.TimeSlot", b =>
                {
                    b.Navigation("BookingDetails");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Traffic", b =>
                {
                    b.Navigation("ParkingPrices");

                    b.Navigation("ParkingSlots");

                    b.Navigation("VehicleInfors");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.User", b =>
                {
                    b.Navigation("ApproveParkings");

                    b.Navigation("Bookings");

                    b.Navigation("BusinessProfile");

                    b.Navigation("FavoriteAddresses");

                    b.Navigation("InverseManager");

                    b.Navigation("PayPals");

                    b.Navigation("VehicleInfors");

                    b.Navigation("VnPays");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.VehicleInfor", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Parking.FindingSlotManagement.Domain.Entities.Wallet", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
