using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Parking.FindingSlotManagement.Infrastructure.Migrations
{
    public partial class UpOtp : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "OTPs",
                columns: table => new
                {
                    OTPId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    ExpirationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    CreatedDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsUsed = table.Column<bool>(type: "bit", nullable: false, defaultValue: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OTPs", x => x.OTPId);
                    table.ForeignKey(
                        name: "FK_OTPs_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "UserId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "UserId",
                keyValue: 1,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 106, 34, 149, 133, 36, 9, 145, 56, 163, 170, 229, 56, 252, 44, 245, 217, 247, 154, 230, 98, 21, 39, 78, 27, 6, 69, 113, 231, 132, 61, 139, 214, 183, 94, 20, 147, 175, 189, 224, 65, 185, 99, 104, 210, 45, 63, 175, 63, 109, 59, 210, 97, 161, 142, 64, 95, 24, 163, 176, 210, 243, 5, 222, 125 }, new byte[] { 148, 56, 31, 62, 248, 38, 212, 56, 14, 76, 149, 163, 189, 29, 191, 60, 192, 36, 18, 130, 128, 217, 137, 104, 45, 25, 72, 175, 47, 80, 238, 18, 214, 253, 154, 104, 203, 207, 160, 161, 128, 118, 5, 124, 225, 204, 38, 127, 109, 18, 98, 3, 167, 138, 184, 15, 231, 13, 214, 120, 54, 148, 107, 158, 218, 177, 110, 199, 90, 139, 143, 208, 14, 177, 148, 48, 89, 102, 235, 208, 79, 204, 109, 116, 93, 47, 85, 209, 188, 177, 19, 214, 189, 210, 36, 176, 59, 21, 238, 120, 246, 233, 78, 228, 174, 221, 10, 147, 247, 137, 157, 57, 148, 52, 233, 88, 146, 230, 144, 23, 120, 182, 183, 98, 99, 157, 235, 218 } });

            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "UserId",
                keyValue: 2,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 106, 34, 149, 133, 36, 9, 145, 56, 163, 170, 229, 56, 252, 44, 245, 217, 247, 154, 230, 98, 21, 39, 78, 27, 6, 69, 113, 231, 132, 61, 139, 214, 183, 94, 20, 147, 175, 189, 224, 65, 185, 99, 104, 210, 45, 63, 175, 63, 109, 59, 210, 97, 161, 142, 64, 95, 24, 163, 176, 210, 243, 5, 222, 125 }, new byte[] { 148, 56, 31, 62, 248, 38, 212, 56, 14, 76, 149, 163, 189, 29, 191, 60, 192, 36, 18, 130, 128, 217, 137, 104, 45, 25, 72, 175, 47, 80, 238, 18, 214, 253, 154, 104, 203, 207, 160, 161, 128, 118, 5, 124, 225, 204, 38, 127, 109, 18, 98, 3, 167, 138, 184, 15, 231, 13, 214, 120, 54, 148, 107, 158, 218, 177, 110, 199, 90, 139, 143, 208, 14, 177, 148, 48, 89, 102, 235, 208, 79, 204, 109, 116, 93, 47, 85, 209, 188, 177, 19, 214, 189, 210, 36, 176, 59, 21, 238, 120, 246, 233, 78, 228, 174, 221, 10, 147, 247, 137, 157, 57, 148, 52, 233, 88, 146, 230, 144, 23, 120, 182, 183, 98, 99, 157, 235, 218 } });

            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "UserId",
                keyValue: 3,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 106, 34, 149, 133, 36, 9, 145, 56, 163, 170, 229, 56, 252, 44, 245, 217, 247, 154, 230, 98, 21, 39, 78, 27, 6, 69, 113, 231, 132, 61, 139, 214, 183, 94, 20, 147, 175, 189, 224, 65, 185, 99, 104, 210, 45, 63, 175, 63, 109, 59, 210, 97, 161, 142, 64, 95, 24, 163, 176, 210, 243, 5, 222, 125 }, new byte[] { 148, 56, 31, 62, 248, 38, 212, 56, 14, 76, 149, 163, 189, 29, 191, 60, 192, 36, 18, 130, 128, 217, 137, 104, 45, 25, 72, 175, 47, 80, 238, 18, 214, 253, 154, 104, 203, 207, 160, 161, 128, 118, 5, 124, 225, 204, 38, 127, 109, 18, 98, 3, 167, 138, 184, 15, 231, 13, 214, 120, 54, 148, 107, 158, 218, 177, 110, 199, 90, 139, 143, 208, 14, 177, 148, 48, 89, 102, 235, 208, 79, 204, 109, 116, 93, 47, 85, 209, 188, 177, 19, 214, 189, 210, 36, 176, 59, 21, 238, 120, 246, 233, 78, 228, 174, 221, 10, 147, 247, 137, 157, 57, 148, 52, 233, 88, 146, 230, 144, 23, 120, 182, 183, 98, 99, 157, 235, 218 } });

            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "UserId",
                keyValue: 4,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 106, 34, 149, 133, 36, 9, 145, 56, 163, 170, 229, 56, 252, 44, 245, 217, 247, 154, 230, 98, 21, 39, 78, 27, 6, 69, 113, 231, 132, 61, 139, 214, 183, 94, 20, 147, 175, 189, 224, 65, 185, 99, 104, 210, 45, 63, 175, 63, 109, 59, 210, 97, 161, 142, 64, 95, 24, 163, 176, 210, 243, 5, 222, 125 }, new byte[] { 148, 56, 31, 62, 248, 38, 212, 56, 14, 76, 149, 163, 189, 29, 191, 60, 192, 36, 18, 130, 128, 217, 137, 104, 45, 25, 72, 175, 47, 80, 238, 18, 214, 253, 154, 104, 203, 207, 160, 161, 128, 118, 5, 124, 225, 204, 38, 127, 109, 18, 98, 3, 167, 138, 184, 15, 231, 13, 214, 120, 54, 148, 107, 158, 218, 177, 110, 199, 90, 139, 143, 208, 14, 177, 148, 48, 89, 102, 235, 208, 79, 204, 109, 116, 93, 47, 85, 209, 188, 177, 19, 214, 189, 210, 36, 176, 59, 21, 238, 120, 246, 233, 78, 228, 174, 221, 10, 147, 247, 137, 157, 57, 148, 52, 233, 88, 146, 230, 144, 23, 120, 182, 183, 98, 99, 157, 235, 218 } });

            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "UserId",
                keyValue: 5,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 106, 34, 149, 133, 36, 9, 145, 56, 163, 170, 229, 56, 252, 44, 245, 217, 247, 154, 230, 98, 21, 39, 78, 27, 6, 69, 113, 231, 132, 61, 139, 214, 183, 94, 20, 147, 175, 189, 224, 65, 185, 99, 104, 210, 45, 63, 175, 63, 109, 59, 210, 97, 161, 142, 64, 95, 24, 163, 176, 210, 243, 5, 222, 125 }, new byte[] { 148, 56, 31, 62, 248, 38, 212, 56, 14, 76, 149, 163, 189, 29, 191, 60, 192, 36, 18, 130, 128, 217, 137, 104, 45, 25, 72, 175, 47, 80, 238, 18, 214, 253, 154, 104, 203, 207, 160, 161, 128, 118, 5, 124, 225, 204, 38, 127, 109, 18, 98, 3, 167, 138, 184, 15, 231, 13, 214, 120, 54, 148, 107, 158, 218, 177, 110, 199, 90, 139, 143, 208, 14, 177, 148, 48, 89, 102, 235, 208, 79, 204, 109, 116, 93, 47, 85, 209, 188, 177, 19, 214, 189, 210, 36, 176, 59, 21, 238, 120, 246, 233, 78, 228, 174, 221, 10, 147, 247, 137, 157, 57, 148, 52, 233, 88, 146, 230, 144, 23, 120, 182, 183, 98, 99, 157, 235, 218 } });

            migrationBuilder.CreateIndex(
                name: "IX_OTPs_UserId",
                table: "OTPs",
                column: "UserId");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "OTPs");

            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "UserId",
                keyValue: 1,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 17, 72, 207, 34, 131, 134, 149, 214, 106, 59, 180, 129, 68, 17, 50, 198, 202, 157, 230, 112, 247, 5, 157, 38, 49, 6, 229, 167, 136, 44, 223, 252, 30, 26, 201, 88, 175, 169, 31, 69, 4, 183, 154, 17, 252, 187, 35, 229, 236, 55, 201, 219, 112, 246, 249, 7, 178, 118, 87, 135, 14, 40, 59, 89 }, new byte[] { 2, 67, 113, 205, 13, 120, 198, 181, 35, 250, 246, 139, 46, 165, 99, 213, 240, 227, 240, 89, 160, 232, 79, 177, 124, 154, 180, 72, 134, 193, 144, 108, 167, 103, 100, 43, 205, 156, 155, 228, 203, 190, 3, 178, 229, 147, 228, 85, 179, 72, 135, 44, 18, 34, 97, 57, 131, 172, 231, 188, 164, 239, 213, 205, 185, 123, 247, 23, 184, 74, 15, 160, 189, 201, 1, 215, 163, 148, 204, 235, 40, 64, 119, 16, 160, 38, 213, 187, 180, 32, 68, 229, 140, 234, 97, 20, 170, 119, 255, 142, 61, 73, 227, 112, 116, 10, 153, 33, 213, 46, 179, 21, 167, 117, 130, 59, 206, 176, 213, 146, 123, 124, 184, 233, 162, 142, 112, 12 } });

            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "UserId",
                keyValue: 2,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 17, 72, 207, 34, 131, 134, 149, 214, 106, 59, 180, 129, 68, 17, 50, 198, 202, 157, 230, 112, 247, 5, 157, 38, 49, 6, 229, 167, 136, 44, 223, 252, 30, 26, 201, 88, 175, 169, 31, 69, 4, 183, 154, 17, 252, 187, 35, 229, 236, 55, 201, 219, 112, 246, 249, 7, 178, 118, 87, 135, 14, 40, 59, 89 }, new byte[] { 2, 67, 113, 205, 13, 120, 198, 181, 35, 250, 246, 139, 46, 165, 99, 213, 240, 227, 240, 89, 160, 232, 79, 177, 124, 154, 180, 72, 134, 193, 144, 108, 167, 103, 100, 43, 205, 156, 155, 228, 203, 190, 3, 178, 229, 147, 228, 85, 179, 72, 135, 44, 18, 34, 97, 57, 131, 172, 231, 188, 164, 239, 213, 205, 185, 123, 247, 23, 184, 74, 15, 160, 189, 201, 1, 215, 163, 148, 204, 235, 40, 64, 119, 16, 160, 38, 213, 187, 180, 32, 68, 229, 140, 234, 97, 20, 170, 119, 255, 142, 61, 73, 227, 112, 116, 10, 153, 33, 213, 46, 179, 21, 167, 117, 130, 59, 206, 176, 213, 146, 123, 124, 184, 233, 162, 142, 112, 12 } });

            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "UserId",
                keyValue: 3,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 17, 72, 207, 34, 131, 134, 149, 214, 106, 59, 180, 129, 68, 17, 50, 198, 202, 157, 230, 112, 247, 5, 157, 38, 49, 6, 229, 167, 136, 44, 223, 252, 30, 26, 201, 88, 175, 169, 31, 69, 4, 183, 154, 17, 252, 187, 35, 229, 236, 55, 201, 219, 112, 246, 249, 7, 178, 118, 87, 135, 14, 40, 59, 89 }, new byte[] { 2, 67, 113, 205, 13, 120, 198, 181, 35, 250, 246, 139, 46, 165, 99, 213, 240, 227, 240, 89, 160, 232, 79, 177, 124, 154, 180, 72, 134, 193, 144, 108, 167, 103, 100, 43, 205, 156, 155, 228, 203, 190, 3, 178, 229, 147, 228, 85, 179, 72, 135, 44, 18, 34, 97, 57, 131, 172, 231, 188, 164, 239, 213, 205, 185, 123, 247, 23, 184, 74, 15, 160, 189, 201, 1, 215, 163, 148, 204, 235, 40, 64, 119, 16, 160, 38, 213, 187, 180, 32, 68, 229, 140, 234, 97, 20, 170, 119, 255, 142, 61, 73, 227, 112, 116, 10, 153, 33, 213, 46, 179, 21, 167, 117, 130, 59, 206, 176, 213, 146, 123, 124, 184, 233, 162, 142, 112, 12 } });

            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "UserId",
                keyValue: 4,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 17, 72, 207, 34, 131, 134, 149, 214, 106, 59, 180, 129, 68, 17, 50, 198, 202, 157, 230, 112, 247, 5, 157, 38, 49, 6, 229, 167, 136, 44, 223, 252, 30, 26, 201, 88, 175, 169, 31, 69, 4, 183, 154, 17, 252, 187, 35, 229, 236, 55, 201, 219, 112, 246, 249, 7, 178, 118, 87, 135, 14, 40, 59, 89 }, new byte[] { 2, 67, 113, 205, 13, 120, 198, 181, 35, 250, 246, 139, 46, 165, 99, 213, 240, 227, 240, 89, 160, 232, 79, 177, 124, 154, 180, 72, 134, 193, 144, 108, 167, 103, 100, 43, 205, 156, 155, 228, 203, 190, 3, 178, 229, 147, 228, 85, 179, 72, 135, 44, 18, 34, 97, 57, 131, 172, 231, 188, 164, 239, 213, 205, 185, 123, 247, 23, 184, 74, 15, 160, 189, 201, 1, 215, 163, 148, 204, 235, 40, 64, 119, 16, 160, 38, 213, 187, 180, 32, 68, 229, 140, 234, 97, 20, 170, 119, 255, 142, 61, 73, 227, 112, 116, 10, 153, 33, 213, 46, 179, 21, 167, 117, 130, 59, 206, 176, 213, 146, 123, 124, 184, 233, 162, 142, 112, 12 } });

            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "UserId",
                keyValue: 5,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 17, 72, 207, 34, 131, 134, 149, 214, 106, 59, 180, 129, 68, 17, 50, 198, 202, 157, 230, 112, 247, 5, 157, 38, 49, 6, 229, 167, 136, 44, 223, 252, 30, 26, 201, 88, 175, 169, 31, 69, 4, 183, 154, 17, 252, 187, 35, 229, 236, 55, 201, 219, 112, 246, 249, 7, 178, 118, 87, 135, 14, 40, 59, 89 }, new byte[] { 2, 67, 113, 205, 13, 120, 198, 181, 35, 250, 246, 139, 46, 165, 99, 213, 240, 227, 240, 89, 160, 232, 79, 177, 124, 154, 180, 72, 134, 193, 144, 108, 167, 103, 100, 43, 205, 156, 155, 228, 203, 190, 3, 178, 229, 147, 228, 85, 179, 72, 135, 44, 18, 34, 97, 57, 131, 172, 231, 188, 164, 239, 213, 205, 185, 123, 247, 23, 184, 74, 15, 160, 189, 201, 1, 215, 163, 148, 204, 235, 40, 64, 119, 16, 160, 38, 213, 187, 180, 32, 68, 229, 140, 234, 97, 20, 170, 119, 255, 142, 61, 73, 227, 112, 116, 10, 153, 33, 213, 46, 179, 21, 167, 117, 130, 59, 206, 176, 213, 146, 123, 124, 184, 233, 162, 142, 112, 12 } });
        }
    }
}
